

2/28/2021

-Mutex set needs a way to block current task when another task has the lock

NOTE:
    scheduling policy could use readySet and delayedSet for this, similar to the OS_Delay functionality
    but have it not participate in the OS_Tick and just have it wait for the lock to become free
    
-Mutex set needs a way to schedule current task in when the lock owner has reset the mutex

NOTE:
    scheduling policy should schedule highest priority task based on tasks waiting for a mutex lock
    and general task priority, that way it can schedule task priority waiting for lock before next general
    task priority if its priority is bigger
    
I think these two points will help with not having unnecessary context switches when the task is waiting for the lock.
Maybe add a delayed set to the mutex controller and have it look into which task would need to be scheduled or add
a delayed set to each mutex and have it interface with scheduler

03/03/2021

NOTE:
    Finally fixed the issue where the availableIdx wasnt generating, also tested OS_mutex_destroy,
    seems to be working availableIdx generates properly
    
07/03/2021

NOTE:
    Mutex waiting queue ideas
    
    -Associate priority to every one in queue higher than current mutex then revert back to own priority
    -Do atomic lock/unlock as soon as possible in lock/unlock(blocking) OS functions then use current mutex owner tcb
     to massage the scheduling process and next in mutex queue
